---

kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ .Values.server.name }}-server-launch-script
  labels:
    name: {{ .Values.server.name }}-server-launch-script
data:
  script: |-

     #!/bin/bash
     sudo service ssh start

     # Set SSL parameters
     export SSL_TOKEN=$(cat sa/token)
     export CACERT_FILE=/opt/sa/ca.crt

     # Set env variables need to get arkouda-locale pod IP addresses and start arkouda
     sudo sh -c "echo 'K8S_HOST=$K8S_HOST' >> /etc/environment"
     sudo sh -c "echo 'SSL_TOKEN=$SSL_TOKEN' >> /etc/environment"
     sudo sh -c "echo 'CACERT_FILE=$CACERT_FILE' >> /etc/environment"
     sudo sh -c "echo 'GASNET_MASTERIP=$MY_IP' >> /etc/environment"
     sudo sh -c "echo 'NAMESPACE=$NAMESPACE' >> /etc/environment"
     sudo sh -c "echo 'EXTERNAL_SERVICE_NAME=$EXTERNAL_SERVICE_NAME' >> /etc/environment"
     sudo sh -c "echo 'METRICS_SERVICE_NAME=$METRICS_SERVICE_NAME' >> /etc/environment"

     # Retrieve arkouda-locale pod IP addresses and set the corresponding env variable
     LOCALE_IPS=$(python3 /opt/arkouda-contrib/arkouda_integration/client/scripts/pods.py \ 
                 '-c=$CACERT_FILE' '-k=$TOKEN' '-kh=$K8S_HOST' '-i=GET_POD_IPS' '-n=$NAMESPACE' '-a=$APP_NAME')
     sudo sh -c "echo 'LOCALE_IPS=$LOCALE_IPS' >> /etc/environment"

     {{- if .Values.group.enabled }}
     # Add group corresponding to gid and user
     sudo groupadd -g {{ .Values.group.gid | int64 | quote }} {{ .Values.group.name }}
     sudo groupadd {{ .Values.user.name }}
     {{- end }}

     {{- if .Values.user.enabled }} 
     # Add user with home directory
     sudo useradd {{ .Values.user.name }} -m -u {{ .Values.user.uid | int64 | quote }} -g {{ .Values.group.gid | int64 | quote }}

     # Add user to user group
     sudo adduser {{ .Values.user.name }} {{ .Values.user.name }}

     export USER={{ .Values.user.name }}
     {{- else }}
     export USER=ubuntu
     {{- end }}
     echo $USER
     # Add SSH certificate 
     sudo -u $USER mkdir /home/$USER/.ssh
     sudo cp /home/ubuntu/ssh-keys/id_rsa* /home/$USER/.ssh/
     sudo chown -R $USER:$USER /home/$USER/.ssh
     sudo ls -ltr  /home/$USER/.ssh
     # Start arkouda_server as the configured user
     sudo -u $USER bash <<EOF

     # Change ssh cert file permissions to 600 as required by SSH client
     chmod -R 600 /home/$USER/.ssh/id_rsa \ 

     # Add public cert to authorized keys to enable GASNET SSH spawner
     cat /home/$USER/.ssh/id_rsa.pub > /home/$USER/.ssh/authorized_keys \

     # Generate list of arkouda-server and arkouda-locale IP addresses 
     export SSH_SERVERS="$MY_IP $LOCALE_IPS" \

     # Start arkouda_server via the GASNET SSH_SPAWNER using the udp CHAPEL_COMM_SUBSTRATE and SSH_SERVER list of pod ip addresses
     {{- if .Values.server.metrics.collectMetrics }}
     /opt/arkouda/arkouda_server -nl ${NUMLOCALES:-1} --ExternalIntegration.systemType=SystemType.KUBERNETES \
                                                      --ServerDaemon.daemonTypes=ServerDaemonType.INTEGRATION,ServerDaemonType.METRICS \
                                                      --memTrack=${MEMTRACK:-true} --authenticate=${AUTHENTICATE:-false} \
                                                      --logLevel=${LOG_LEVEL:-LogLevel.INFO} --memMax={{ .Values.server.memMax | int }}
     {{- else }}
     /opt/arkouda/arkouda_server -nl ${NUMLOCALES:-1} --ExternalIntegration.systemType=SystemType.KUBERNETES \
                                                      --ServerDaemon.daemonTypes=ServerDaemonType.INTEGRATION \
                                                      --memTrack=${MEMTRACK:-true} --authenticate=${AUTHENTICATE:-false} \
                                                      --logLevel=${LOG_LEVEL:-LogLevel.INFO} --memMax={{ .Values.server.memMax | int }}
     {{- end }}
     EOF  
