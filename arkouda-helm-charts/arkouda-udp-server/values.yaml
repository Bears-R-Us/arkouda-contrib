# Default values for arkouda-udp-server chart

resources:
  limits:
    cpu: 2000m
    memory: 3072Mi
  requests:
    cpu: 2000m
    memory: 3072Mi

######################## Pod Settings ########################

imageRepository: bearsrus
releaseVersion: v2024.02.02
imagePullPolicy: IfNotPresent

################ Arkouda Driver Configuration ################

user:
  name: # name of user running arkouda and CN for corresponding secret for rolebindings
  uid: "" # uid of user running arkouda

group:
  name: # name of group user needs to configured for to execute host commands
  gid: # gid of group user needs to configured for to execute host commands

server: 
  totalNumLocales: 3 # totalNumLocales = number of arkouda-udp-locale pods + 1 (arkouda-udp-server pod)
  authenticate: false # whether to require token authentication
  verbose: true # enable verbose logging
  threadsPerLocale: 2 # number of cpu cores to be used per locale
  memMax: 2000000000 # maximum bytes of RAM to be used per locale
  memTrack: true # needs to be true to enable memory metrics and memory use forecasting
  logLevel: LogLevel.DEBUG
  service:
    type: ClusterIP # k8s service type, usually ClusterIP, NodePort, or LoadBalancer
    nodeport: # if service type is Nodeport
    name: # k8s service name
  metrics:
    collectMetrics: true # whether to collect metrics and make them available via k8s service
    service:
      name: # k8s service name for the Arkouda metrics service endpoint

locale:
  appName: arkouda-locale
  podMethod: GET_POD_IPS

external:
  persistence:
    enabled: false
    path: /arkouda-files # pod directory path, must match arkouda-udp-locale
    hostPath: # host machine path, must match arkouda-udp-locale
  k8sHost: # result of kubectl cluster-info command
  namespace: arkouda # namespace Arkouda will register service
  service: 
    name: # k8s service name Arkouda will register, defaults to arkouda

metricsExporter:
  imageRepository: bearsrus
  releaseVersion: v2024.02.02 # prometheus-arkouda-exporter release version
  imagePullPolicy: IfNotPresent
  service:
    name: # prometheus-arkouda-exporter service name
  pollingIntervalSeconds: 30

secrets:
  tls: # name of tls secret used to access Kubernetes API
  ssh: # name of ssh secret used to launch Arkouda locales
