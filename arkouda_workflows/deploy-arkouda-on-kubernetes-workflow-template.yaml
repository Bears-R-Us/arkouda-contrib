apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: deploy-arkouda-on-kubernetes
spec:
  entrypoint: deploy-arkouda-on-kubernetes
  arguments:
    parameters:
    - name: arkouda-serviceaccount-name
      value: arkouda-serviceacccount
    - name: arkouda-serviceaccount-token-name
      value: arkouda-serviceaccount-token
    - name: arkouda-user
      value: ubuntu
    - name: arkouda-uid
      value: 1000
    - name: arkouda-group
      value: ubuntu
    - name: arkouda-gid
      value: 1000
    - name: arkouda-release-version
    - name: arkouda-instance-name
    - name: arkouda-ssh-secret
    - name: arkouda-number-of-locales
    - name: arkouda-total-number-of-locales
    - name: kubernetes-api-url
    - name: arkouda-namespace
    - name: arkouda-log-level
    - name: image-pull-policy
      value: IfNotPresent
    - name: mem-track
      value: true
    - name: collect-metrics
      value: true
    - name: metrics-polling-interval-seconds
      value: 30
    - name: prometheus-match-label
    - name: launcher
    - name: num-cpu-cores
    - name: memory    
    - name: chpl-mem-max
    - name: chpl-num-threads-per-locale
      value: 2
  templates:
  - name: deploy-arkouda-on-kubernetes
    dag:
      tasks:
        - name: create-locale-launch-script-config-map
          template: create-locale-launch-script-config-map
        - name: deploy-arkouda-locale
          template: deploy-locale
          depends: 'create-locale-launch-script-config-map.Succeeded'
        - name: create-locale-headless-service
          template: create-locale-headless-service
        - name: create-locale-ssh-service
          template: create-locale-ssh-service
        - name: create-pod-role
          template: create-pod-role
        - name: create-pod-role-binding
          template: create-pod-role-binding
          depends: 'create-pod-role.Succeeded'
        - name: create-service-role
          template: create-service-role
        - name: create-service-role-binding
          template: create-service-role-binding
          depends: 'create-service-role.Succeeded'
        - name: create-servicemonitor-role
          template: create-servicemonitor-role
        - name: create-servicemonitor-role-binding
          template: create-servicemonitor-role-binding
          depends: 'create-servicemonitor-role.Succeeded'
        - name: create-server-launch-script-config-map
          template: create-server-launch-script-config-map
          depends: 'deploy-arkouda-locale.Succeeded'
        - name: create-server-headless-service
          template: create-server-headless-service
          depends: 'deploy-arkouda-locale.Succeeded'
        - name: create-server-ssh-service
          template: create-server-ssh-service
          depends: 'deploy-arkouda-locale.Succeeded'
        - name: deploy-arkouda-server
          template: deploy-server
          depends: 'deploy-arkouda-locale.Succeeded && create-locale-ssh-service.Succeeded && create-locale-headless-service.Succeeded'
        - name: create-metrics-exporter-service
          template: create-metrics-exporter-service
        - name: create-servicemonitor
          template: create-servicemonitor
          depends: 'create-servicemonitor-role-binding.Succeeded && deploy-arkouda-server.Succeeded'

  - name: create-locale-launch-script-config-map
    resource:
      action: create
      manifest: |
        kind: ConfigMap
        apiVersion: v1
        metadata:
          name: {{ workflow.parameters.arkouda-instance-name }}-locale-launch-script
          labels:
            name: {{ workflow.parameters.arkouda-instance-name }}-locale-launch-script
        data:
           script: |-

             #!/bin/bash
             sudo service ssh start

             export USER={{ workflow.parameters.arkouda-user }}
             export GROUP={{ workflow.parameters.arkouda-group }}

             if [[ "$GROUP" != 'ubuntu' ]]; then
             # Add group corresponding to gid
             sudo groupadd -g {{ workflow.parameters.arkouda-gid }} {{ workflow.parameters.arkouda-group }}
             fi

             if [[ "$USER" != 'ubuntu' ]]; then
             # Add user with home directory
             sudo useradd {{ workflow.parameters.arkouda-user }} -m -u {{ workflow.parameters.arkouda-uid }} -g {{ workflow.parameters.arkouda-gid }}

             # Add user group
             sudo groupadd {{ workflow.parameters.arkouda-user }}

             # Add user to user group
             sudo adduser {{ workflow.parameters.arkouda-user }} {{ workflow.parameters.arkouda-user }}
             fi

             # Add SSH certificate 
             sudo -u $USER mkdir /home/$USER/.ssh
             sudo cp /home/ubuntu/ssh-keys/id_rsa* /home/$USER/.ssh/
             sudo chown -R $USER:$USER /home/$USER/.ssh

             # Start arkouda_locale as the configured user
             sudo -u $USER bash <<EOF

             # Change ssh cert file permissions to 600 as required by SSH client
             chmod -R 600 /home/$USER/.ssh/id_rsa \

             # Add public cert to authorized keys to enable GASNET SSH spawner
             cat /home/$USER/.ssh/id_rsa.pub > /home/$USER/.ssh/authorized_keys

             /bin/bash -c -- "while true; do sleep 600; done;"
             EOF

  - name: deploy-locale
    resource:
      action: create
      manifest: |
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: {{ workflow.parameters.arkouda-instance-name }}-locale
          labels: 
            app: {{ workflow.parameters.arkouda-instance-name }}-locale
        spec:
          replicas: {{ workflow.parameters.arkouda-number-of-locales }}
          selector:
            matchLabels:
              app: {{ workflow.parameters.arkouda-instance-name }}-locale
          template:
            metadata:
              labels:
                app: {{ workflow.parameters.arkouda-instance-name }}-locale
            spec:
              containers:
                - name: arkouda-udp-locale
                  image: bearsrus/arkouda-udp-server:{{ workflow.parameters.arkouda-release-version }}
                  imagePullPolicy: {{ workflow.parameters.image-pull-policy }}
                  command: [ "bash", "/opt/arkouda/start-arkouda-locale.sh" ]
                  ports:
                  - containerPort: 22
                  resources:
                    limits:
                      cpu: {{ workflow.parameters.num-cpu-cores }}
                      memory: {{ workflow.parameters.memory }}
                    requests:
                      cpu: {{ workflow.parameters.num-cpu-cores }}
                      memory: {{ workflow.parameters.memory }}
                  volumeMounts:
                    - name: ssh
                      mountPath: "/home/ubuntu/ssh-keys"
                    - name: arkouda-locale-launch-script
                      mountPath: /opt/arkouda/start-arkouda-locale.sh
                      subPath: start-arkouda-locale.sh
                  env:
                    - name: MY_IP
                      valueFrom:
                        fieldRef:
                          fieldPath: status.podIP
                    - name: NUM_LOCALES
                      value: '{{ workflow.parameters.arkouda-number-of-locales }}'
                    - name: MEMTRACK
                      value: '{{ workflow.parameters.mem-track }}'
                    - name: CHPL_RT_NUM_THREADS_PER_LOCALE
                      value: '{{ workflow.parameters.chpl-num-threads-per-locale }}'
              volumes:
                - name: ssh
                  secret:
                    secretName: "{{ workflow.parameters.arkouda-ssh-secret }}"
                - name: arkouda-locale-launch-script
                  configMap:
                    name: {{ workflow.parameters.arkouda-instance-name }}-locale-launch-script
                    items:
                      - key: script
                        path: start-arkouda-locale.sh

  - name: create-locale-headless-service
    resource:
      action: create
      manifest: |
        apiVersion: v1
        kind: Service
        metadata:
          name: {{ workflow.parameters.arkouda-instance-name }}-locale-headless
        spec: 
          clusterIP: None
          selector:
            app: {{ workflow.parameters.arkouda-instance-name }}-locale
  
  - name: create-locale-ssh-service
    resource:
      action: create
      manifest: |
        apiVersion: v1
        kind: Service
        metadata:
          name: {{ workflow.parameters.arkouda-instance-name }}-locale-ssh
        spec:
          type: ClusterIP
          ports:
            - port: 22
          selector:
            app: {{ workflow.parameters.arkouda-instance-name }}-locale

  - name: create-pod-role
    resource: 
      action: create
      manifest: |
         apiVersion: rbac.authorization.k8s.io/v1
         kind: Role
         metadata:
           name: {{ workflow.parameters.arkouda-instance-name }}-pod
         rules:
           - apiGroups: [""]
             resources: ["pods","deployments"]
             verbs: ["get", "watch", "list"]

  - name: create-pod-role-binding
    resource:
      action: create
      manifest: |
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: {{ workflow.parameters.arkouda-instance-name }}-pod-binding
        subjects:
        - kind: ServiceAccount
          name: {{ workflow.parameters.arkouda-serviceaccount-name }}
        roleRef:
          kind: Role
          name: {{ workflow.parameters.arkouda-instance-name }}-pod
          apiGroup: rbac.authorization.k8s.io

  - name: create-service-role
    resource:
      action: create
      manifest: |
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: {{ workflow.parameters.arkouda-instance-name }}-service
        rules:
          - apiGroups: [""]
            resources: ["services","endpoints"]
            verbs: ["get","watch","list","create","delete","update"]

  - name: create-service-role-binding
    resource:
      action: create 
      manifest: |
        kind: RoleBinding
        apiVersion: rbac.authorization.k8s.io/v1
        metadata:
          name: {{ workflow.parameters.arkouda-instance-name }}-service-binding
        subjects:
        - kind: ServiceAccount
          name: {{ workflow.parameters.arkouda-serviceaccount-name }}
        roleRef:
          kind: Role
          name: {{ workflow.parameters.arkouda-instance-name }}-service
          apiGroup: rbac.authorization.k8s.io

  - name: create-servicemonitor-role
    resource:
      action: create
      manifest: |
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: {{ workflow.parameters.arkouda-instance-name }}-servicemonitor
        rules:
          - apiGroups: [""]
            resources: ["servicemonitors"]
            verbs: ["get","watch","list","create","delete","update"]

  - name: create-servicemonitor-role-binding
    resource:
      action: create
      manifest: |
        kind: RoleBinding
        apiVersion: rbac.authorization.k8s.io/v1
        metadata:
          name: {{ workflow.parameters.arkouda-instance-name }}-servicemonitor-binding
        subjects:
        - kind: ServiceAccount
          name: {{ workflow.parameters.arkouda-serviceaccount-name }}
        roleRef:
          kind: Role
          name: {{ workflow.parameters.arkouda-instance-name }}-servicemonitor
          apiGroup: rbac.authorization.k8s.io

  - name: create-server-launch-script-config-map
    resource:
      action: create
      manifest: |
        kind: ConfigMap
        apiVersion: v1
        metadata:
          name: {{ workflow.parameters.arkouda-instance-name }}-server-launch-script
          labels:
            name: {{ workflow.parameters.arkouda-instance-name }}-server-launch-script
        data:
           script: |-

             #!/bin/bash
             sudo service ssh start

             # Set SSL parameters
             export SSL_TOKEN=$(cat sa/token)
             export CACERT_FILE=/opt/sa/ca.crt

             # Set env variables need to get arkouda-locale pod IP addresses and start arkouda
             sudo sh -c "echo 'K8S_HOST=$K8S_HOST' >> /etc/environment"
             sudo sh -c "echo 'SSL_TOKEN=$SSL_TOKEN' >> /etc/environment"
             sudo sh -c "echo 'CACERT_FILE=$CACERT_FILE' >> /etc/environment"
             sudo sh -c "echo 'GASNET_MASTERIP=$MY_IP' >> /etc/environment"
             sudo sh -c "echo 'NAMESPACE=$NAMESPACE' >> /etc/environment"
             sudo sh -c "echo 'EXTERNAL_SERVICE_NAME=$EXTERNAL_SERVICE_NAME' >> /etc/environment"
             sudo sh -c "echo 'METRICS_SERVICE_NAME=$METRICS_SERVICE_NAME' >> /etc/environment"

             # Retrieve arkouda-locale pod IP addresses and set the corresponding env variable
             LOCALE_IPS=$(python3 /opt/arkouda-contrib/arkouda_integration/client/scripts/pods.py \
                          '-c=$CACERT_FILE' '-k=$TOKEN' '-kh=$K8S_HOST' '-i=GET_POD_IPS' '-n=$NAMESPACE' '-a=$APP_NAME')
             sudo sh -c "echo 'LOCALE_IPS=$LOCALE_IPS' >> /etc/environment"

             export USER={{ workflow.parameters.arkouda-user }}
             export GROUP={{ workflow.parameters.arkouda-group }}

             if [[ "$GROUP" != 'ubuntu' ]]; then
             # Add group corresponding to gid
             sudo groupadd -g {{ workflow.parameters.arkouda-gid }} {{ workflow.parameters.arkouda-group }}
             fi

             if [[ "$USER" != 'ubuntu' ]]; then
             # Add user with home directory
             sudo useradd {{ workflow.parameters.arkouda-user }} -m -u {{ workflow.parameters.arkouda-uid }} \
                          -g {{ workflow.parameters.arkouda-gid }}

             # Add user group
             sudo groupadd {{ workflow.parameters.arkouda-user }}

             # Add user to user group
             sudo adduser {{ workflow.parameters.arkouda-user }} {{ workflow.parameters.arkouda-user }}
             fi

             # Add SSH certificate 
             sudo -u $USER mkdir /home/$USER/.ssh
             sudo cp /home/ubuntu/ssh-keys/id_rsa* /home/$USER/.ssh/
             sudo chown -R $USER:$USER /home/$USER/.ssh
             sudo ls -ltr  /home/$USER/.ssh

             # Start arkouda_server as the configured user
             sudo -u $USER bash <<EOF

             # Change ssh cert file permissions to 600 as required by SSH client
             chmod -R 600 /home/$USER/.ssh/id_rsa \ 

             # Add public cert to authorized keys to enable GASNET SSH spawner
             cat /home/$USER/.ssh/id_rsa.pub > /home/$USER/.ssh/authorized_keys \

             # Generate list of arkouda-server and arkouda-locale IP addresses 
             export SSH_SERVERS="$MY_IP $LOCALE_IPS" 

             # Start arkouda_server via the GASNET SSH_SPAWNER using the udp CHAPEL_COMM_SUBSTRATE 
             # and SSH_SERVER list of pod ip addresses
             if [[ {{ workflow.parameters.collect-metrics }} == true ]]; then
             /opt/arkouda/arkouda_server -nl ${NUMLOCALES:-1} \
                                         --ExternalIntegration.systemType=SystemType.KUBERNETES \
                                         --ServerDaemon.daemonTypes=ServerDaemonType.INTEGRATION,ServerDaemonType.METRICS \
                                         --memTrack=${MEMTRACK:-true} --authenticate=${AUTHENTICATE:-false} \
                                         --logLevel=${LOG_LEVEL:-LogLevel.INFO} --memMax={{ workflow.parameters.chpl-mem-max }}
             else
             /opt/arkouda/arkouda_server -nl ${NUMLOCALES:-1} \
                                         --ExternalIntegration.systemType=SystemType.KUBERNETES \
                                         --ServerDaemon.daemonTypes=ServerDaemonType.INTEGRATION \
                                         --memTrack=${MEMTRACK:-true} --authenticate=${AUTHENTICATE:-false} \
                                         --logLevel=${LOG_LEVEL:-LogLevel.INFO} --memMax={{ workflow.parameters.chpl-mem-max }}
             fi

  - name: deploy-server
    resource:
      action: create
      manifest: |
        apiVersion: v1
        kind: Pod
        metadata:
          name: {{ workflow.parameters.arkouda-instance-name }}-server
          labels:
            app: {{ workflow.parameters.arkouda-instance-name }}-server
        spec:
              containers:
                - name: arkouda-metrics-exporter
                  image: bearsrus/prometheus-arkouda-exporter:{{ workflow.parameters.arkouda-release-version }}
                  imagePullPolicy: {{ workflow.parameters.image-pull-policy }}
                  ports:
                  - containerPort: 5080
                  env:
                    - name: EXPORT_PORT
                      value: '5080'
                    - name: POLLING_INTERVAL_SECONDS
                      value: '{{ workflow.parameters.metrics-polling-interval-seconds }}'
                    - name: ARKOUDA_SERVER_NAME
                      value: '{{ workflow.parameters.arkouda-instance-name }}-metrics'
                    - name: ARKOUDA_METRICS_SERVICE_HOST
                      value: '{{ workflow.parameters.arkouda-instance-name }}-metrics'
                    - name: ARKOUDA_METRICS_SERVICE_PORT
                      value: '5556'

                - name: arkouda-udp-server
                  image: bearsrus/arkouda-udp-server:{{ workflow.parameters.arkouda-release-version }}
                  imagePullPolicy: {{ workflow.parameters.image-pull-policy }}
                  command: [ "bash", "/opt/arkouda/start-arkouda-server.sh" ]
                  ports:
                  - containerPort: 5555
                  - containerPort: 5556
                  - containerPort: 22
                  resources:
                    limits:
                      cpu: {{ workflow.parameters.num-cpu-cores }}
                      memory: {{ workflow.parameters.memory }}
                    requests:
                      cpu: {{ workflow.parameters.num-cpu-cores }}
                      memory: {{ workflow.parameters.memory }}
                  volumeMounts:
                    - name: sa
                      mountPath: /opt/sa
                    - name: ssh
                      mountPath: "/home/ubuntu/ssh-keys"
                    - name: arkouda-server-launch-script
                      mountPath: /opt/arkouda/start-arkouda-server.sh
                      subPath: start-arkouda-server.sh
                  env:
                    - name: MY_IP
                      valueFrom:
                        fieldRef:
                          fieldPath: status.podIP
                    - name: GASNET_MASTERIP
                      valueFrom:
                        fieldRef:
                          fieldPath: status.podIP
                    - name: SSH_SERVERS
                      valueFrom:
                        fieldRef:
                          fieldPath: status.podIP
                    - name: NUMLOCALES
                      value: '{{ workflow.parameters.arkouda-total-number-of-locales }}'
                    - name: AUTHENTICATE
                      value: 'false'
                    - name: VERBOSE
                      value: 'true'
                    - name: MEMTRACK
                      value: '{{ workflow.parameters.mem-track }}'
                    - name: CHPL_RT_NUM_THREADS_PER_LOCALE
                      value: '{{ workflow.parameters.chpl-num-threads-per-locale }}'
                    - name: GASNET_SUPERNODE_MAXSIZE
                      value: '1'
                    - name: K8S_HOST
                      value: "{{ workflow.parameters.kubernetes-api-url }}"
                    - name: NAMESPACE
                      value: '{{ workflow.parameters.arkouda-namespace }}'
                    - name: APP_NAME
                      value: '{{ workflow.parameters.arkouda-instance-name }}-locale'
                    - name: ARKOUDA_SERVER_NAME
                      value: '{{ workflow.parameters.arkouda-instance-name }}'
                    - name: ARKOUDA_CLIENT_MODE
                      value: 'API'
                    - name: POD_METHOD
                      value: 'GET_POD_IPS'
                    - name: EXTERNAL_SERVICE_NAME
                      value: '{{ workflow.parameters.arkouda-instance-name }}'
                    - name: EXTERNAL_SERVICE_PORT
                      value: '5555'
                    - name: EXTERNAL_SERVICE_TARGET_PORT
                      value: '5555'
                    - name: LOG_LEVEL
                      value: '{{ workflow.parameters.arkouda-log-level }}'
                    - name: COLLECT_METRICS
                      value: 'true'
                    - name: METRICS_SERVICE_NAME
                      value: '{{ workflow.parameters.arkouda-instance-name }}-metrics'
                    - name: METRICS_SERVICE_PORT
                      value: '5556'
                    - name: METRICS_SERVICE_TARGET_PORT
                      value: '5556'
              volumes:              
                - name: sa
                  secret:
                    secretName: "{{ workflow.parameters.arkouda-serviceaccount-name }}"
                - name: ssh
                  secret:
                    secretName: "{{ workflow.parameters.arkouda-ssh-secret }}"
                - name: arkouda-server-launch-script
                  configMap:
                    name: {{ workflow.parameters.arkouda-instance-name }}-server-launch-script
                    items:
                      - key: script
                        path: start-arkouda-server.sh

  - name: create-server-headless-service
    resource:
      action: create
      manifest: |
        apiVersion: v1
        kind: Service
        metadata:
          name: {{ workflow.parameters.arkouda-instance-name }}-server-headless
        spec:
          clusterIP: None
          selector:
            app: {{ workflow.parameters.arkouda-instance-name }}-server

  - name: create-server-ssh-service
    resource:
      action: create
      manifest: |
        apiVersion: v1
        kind: Service
        metadata:
          name: {{ workflow.parameters.arkouda-instance-name }}-server-ssh
        spec:
          type: ClusterIP
          ports:
            - port: 22
          selector:
            app: {{ workflow.parameters.arkouda-instance-name }}-server

  - name: create-metrics-exporter-service
    resource: 
      action: create
      manifest: |
        apiVersion: v1
        kind: Service
        metadata:
          name: {{ workflow.parameters.arkouda-instance-name }}-metrics-exporter
          labels:
            instance: {{ workflow.parameters.arkouda-instance-name }}-metrics-exporter 
        spec: 
          type: ClusterIP
          ports:
          - name: http
            port: 5080
            targetPort: 5080
          selector:
            app: {{ workflow.parameters.arkouda-instance-name }}-server

  - name: create-servicemonitor
    resource:
      action: create
      manifest: |
        apiVersion: monitoring.coreos.com/v1
        kind: ServiceMonitor
        metadata:
          name: {{ workflow.parameters.arkouda-instance-name }}-servicemonitor
          labels:
            arkouda_instance: {{ workflow.parameters.arkouda-instance-name }}-server
            launcher: {{ workflow.parameters.launcher }}
            {{ workflow.parameters.prometheus-match-label }}
        spec:
          endpoints:
            - port: http
              interval: {{ workflow.parameters.metrics-polling-interval-seconds }}s
              path: /metrics
          selector:
            matchLabels:
              instance: {{ workflow.parameters.arkouda-instance-name }}-metrics-exporter
          targetLabels:
            - arkouda_instance
            - launcher
